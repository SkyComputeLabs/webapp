name: CI/CD Pipeline - PR Merged Workflow

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  DEMO_ACCOUNT_ID: ${{ secrets.DEMO_ACCOUNT_ID }}

jobs:
  build-and-deploy:
    name: Build, AMI, Deploy to AWS Dev and Demo
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build application artifacts
        run: |
          mvn clean package -DskipTests
          cp target/*.jar application.jar

      - name: Configure AWS CLI to use AWS DEV account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGIONÂ }}

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Validate Packer Template
        run: |
          packer init .
          packer validate .

      - name: Build AMI with Packer
        run: |
          packer build -machine-readable \
            -var "aws_region=${{ env.AWS_REGION }}" \
            -var "DB_USER=${{ secrets.DB_USER }}" \
            -var "DB_PASS=${{ secrets.DB_PASS }}" \
            . | tee packer-output.log
          AMI_ID=$(awk -F, '/artifact,0,id/ {print $NF}' packer-output.log | cut -d':' -f2)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Share image with AWS DEMO
        run: |
          # Fetch the latest AMI ID created with the specified name pattern
          # AMI_ID=$(aws ec2 describe-images \
          AMI_ID="${{ env.AMI_ID }}"
          #  --owners self \
          #  --filters "Name=name,Values=custom-webapp-*" \
          #  --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
          #  --output text)
          
          if [[ -z "$AMI_ID" || "$AMI_ID" == "None" ]]; then
            echo "No AMI found to share. Exiting..."
            exit 1
          fi
          
          # Share AMI with the demo AWS account
          aws ec2 modify-image-attribute \
            --image-id "$AMI_ID" \
            --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }} }]" \
            --region "${{ env.AWS_REGION }}"
          
          echo "AMI $AMI_ID has been shared with the demo account by dev"

        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS CLI for Demo Account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create new Launch Template Version
        run: |
          set -e  

          AMI_ID="${{ env.AMI_ID }}"
          LT_ID="${{ secrets.LAUNCH_TEMPLATE_ID }}"

          echo "Using Launch Template ID: $LT_ID"
          echo "Using AMI ID: $AMI_ID"

          echo "Creating new launch template version..."
          aws ec2 create-launch-template-version \
            --launch-template-id "$LT_ID" \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}"

          echo "Setting new version as default..."
          aws ec2 modify-launch-template \
            --launch-template-id "$LT_ID" \
            --default-version latest

          echo "Launch Template updated successfully."

      - name: Start Instance Refresh
        run: |
          ASG_NAME="${{ secrets.ASG_NAME }}"
          echo "Using Auto Scaling Group: $ASG_NAME"

          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$ASG_NAME" \
            --preferences '{"MinHealthyPercentage": 100, "InstanceWarmup": 300}' \
            --query "InstanceRefreshId" \
            --output text)

          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV
          echo "ASG_NAME=$ASG_NAME" >> $GITHUB_ENV

      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --instance-refresh-ids $REFRESH_ID --query "InstanceRefreshes[0].Status" --output text)
            echo "Current refresh status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              exit 0
            elif [[ "$STATUS" == "Failed" ]]; then
              exit 1
            fi
            sleep 30
          done




